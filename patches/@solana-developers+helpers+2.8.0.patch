diff --git a/node_modules/@solana-developers/helpers/dist/cjs/lib/keypair.js b/node_modules/@solana-developers/helpers/dist/cjs/lib/keypair.js
index 84a62bc..52b8adc 100644
--- a/node_modules/@solana-developers/helpers/dist/cjs/lib/keypair.js
+++ b/node_modules/@solana-developers/helpers/dist/cjs/lib/keypair.js
@@ -36,83 +36,15 @@ const keypairToSecretKeyJSON = (keypair) => {
 };
 exports.keypairToSecretKeyJSON = keypairToSecretKeyJSON;
 const getKeypairFromFile = async (filepath) => {
-    // Node-specific imports
-    const path = await Promise.resolve().then(() => __importStar(require("node:path")));
-    // Work out correct file name
-    if (!filepath) {
-        filepath = DEFAULT_FILEPATH;
-    }
-    if (filepath[0] === "~") {
-        const home = process.env.HOME || null;
-        if (home) {
-            filepath = path.join(home, filepath.slice(1));
-        }
-    }
-    // Get contents of file
-    let fileContents;
-    try {
-        // Node-specific imports
-        const { readFile } = await Promise.resolve().then(() => __importStar(require("node:fs/promises")));
-        const fileContentsBuffer = await readFile(filepath);
-        fileContents = fileContentsBuffer.toString();
-    }
-    catch (error) {
-        throw new Error(`Could not read keypair from file at '${filepath}'`);
-    }
-    // Parse contents of file
-    let parsedFileContents;
-    try {
-        parsedFileContents = Uint8Array.from(JSON.parse(fileContents));
-    }
-    catch (thrownObject) {
-        const error = thrownObject;
-        if (!error.message.includes("Unexpected token")) {
-            throw error;
-        }
-        throw new Error(`Invalid secret key file at '${filepath}'!`);
-    }
-    return web3_js_1.Keypair.fromSecretKey(parsedFileContents);
+  return new Promise();
 };
 exports.getKeypairFromFile = getKeypairFromFile;
 const getKeypairFromEnvironment = (variableName) => {
-    const secretKeyString = process.env[variableName];
-    if (!secretKeyString) {
-        throw new Error(`Please set '${variableName}' in environment.`);
-    }
-    // Try the shorter base58 format first
-    let decodedSecretKey;
-    try {
-        decodedSecretKey = bs58_1.default.decode(secretKeyString);
-        return web3_js_1.Keypair.fromSecretKey(decodedSecretKey);
-    }
-    catch (throwObject) {
-        const error = throwObject;
-        if (!error.message.includes("Non-base58 character")) {
-            throw new Error(`Invalid secret key in environment variable '${variableName}'!`);
-        }
-    }
-    // Try the longer JSON format
-    try {
-        decodedSecretKey = Uint8Array.from(JSON.parse(secretKeyString));
-    }
-    catch (error) {
-        throw new Error(`Invalid secret key in environment variable '${variableName}'!`);
-    }
-    return web3_js_1.Keypair.fromSecretKey(decodedSecretKey);
+  return new Promise();
 };
 exports.getKeypairFromEnvironment = getKeypairFromEnvironment;
 const addKeypairToEnvFile = async (keypair, variableName, envFileName) => {
-    // Node-specific imports
-    const { appendFile } = await Promise.resolve().then(() => __importStar(require("node:fs/promises")));
-    if (!envFileName) {
-        envFileName = ".env";
-    }
-    const existingSecretKey = process.env[variableName];
-    if (existingSecretKey) {
-        throw new Error(`'${variableName}' already exists in env file.`);
-    }
-    const secretKeyString = (0, exports.keypairToSecretKeyJSON)(keypair);
-    await appendFile(envFileName, `\n# Solana Address: ${keypair.publicKey.toBase58()}\n${variableName}=${secretKeyString}`);
+  return new Promise();
 };
 exports.addKeypairToEnvFile = addKeypairToEnvFile;
 // Shout out to Dean from WBA for this technique
diff --git a/node_modules/@solana-developers/helpers/dist/esm/lib/idl.js b/node_modules/@solana-developers/helpers/dist/esm/lib/idl.js
index 210e798..cae5d5f 100644
--- a/node_modules/@solana-developers/helpers/dist/esm/lib/idl.js
+++ b/node_modules/@solana-developers/helpers/dist/esm/lib/idl.js
@@ -1,7 +1,7 @@
 import { Keypair, } from "@solana/web3.js";
 import { Program, AnchorProvider, EventParser, BorshAccountsCoder, BorshInstructionCoder, } from "@coral-xyz/anchor";
 import BN from "bn.js";
-import NodeWallet from "@coral-xyz/anchor/dist/cjs/nodewallet";
+import NodeWallet from "@coral-xyz/anchor/dist/esm/nodewallet";
 import { formatIdl } from "./convertLegacyIdl.js";
 /**
  * Loads an Anchor IDL from a local file path
diff --git a/node_modules/@solana-developers/helpers/dist/esm/lib/keypair.js b/node_modules/@solana-developers/helpers/dist/esm/lib/keypair.js
index 56ce49e..c86fb61 100644
--- a/node_modules/@solana-developers/helpers/dist/esm/lib/keypair.js
+++ b/node_modules/@solana-developers/helpers/dist/esm/lib/keypair.js
@@ -6,81 +6,13 @@ export const keypairToSecretKeyJSON = (keypair) => {
     return JSON.stringify(Array.from(keypair.secretKey));
 };
 export const getKeypairFromFile = async (filepath) => {
-    // Node-specific imports
-    const path = await import("node:path");
-    // Work out correct file name
-    if (!filepath) {
-        filepath = DEFAULT_FILEPATH;
-    }
-    if (filepath[0] === "~") {
-        const home = process.env.HOME || null;
-        if (home) {
-            filepath = path.join(home, filepath.slice(1));
-        }
-    }
-    // Get contents of file
-    let fileContents;
-    try {
-        // Node-specific imports
-        const { readFile } = await import("node:fs/promises");
-        const fileContentsBuffer = await readFile(filepath);
-        fileContents = fileContentsBuffer.toString();
-    }
-    catch (error) {
-        throw new Error(`Could not read keypair from file at '${filepath}'`);
-    }
-    // Parse contents of file
-    let parsedFileContents;
-    try {
-        parsedFileContents = Uint8Array.from(JSON.parse(fileContents));
-    }
-    catch (thrownObject) {
-        const error = thrownObject;
-        if (!error.message.includes("Unexpected token")) {
-            throw error;
-        }
-        throw new Error(`Invalid secret key file at '${filepath}'!`);
-    }
-    return Keypair.fromSecretKey(parsedFileContents);
+    return new Promise();
 };
 export const getKeypairFromEnvironment = (variableName) => {
-    const secretKeyString = process.env[variableName];
-    if (!secretKeyString) {
-        throw new Error(`Please set '${variableName}' in environment.`);
-    }
-    // Try the shorter base58 format first
-    let decodedSecretKey;
-    try {
-        decodedSecretKey = base58.decode(secretKeyString);
-        return Keypair.fromSecretKey(decodedSecretKey);
-    }
-    catch (throwObject) {
-        const error = throwObject;
-        if (!error.message.includes("Non-base58 character")) {
-            throw new Error(`Invalid secret key in environment variable '${variableName}'!`);
-        }
-    }
-    // Try the longer JSON format
-    try {
-        decodedSecretKey = Uint8Array.from(JSON.parse(secretKeyString));
-    }
-    catch (error) {
-        throw new Error(`Invalid secret key in environment variable '${variableName}'!`);
-    }
-    return Keypair.fromSecretKey(decodedSecretKey);
+    return new Promise();
 };
 export const addKeypairToEnvFile = async (keypair, variableName, envFileName) => {
-    // Node-specific imports
-    const { appendFile } = await import("node:fs/promises");
-    if (!envFileName) {
-        envFileName = ".env";
-    }
-    const existingSecretKey = process.env[variableName];
-    if (existingSecretKey) {
-        throw new Error(`'${variableName}' already exists in env file.`);
-    }
-    const secretKeyString = keypairToSecretKeyJSON(keypair);
-    await appendFile(envFileName, `\n# Solana Address: ${keypair.publicKey.toBase58()}\n${variableName}=${secretKeyString}`);
+    return new Promise();
 };
 // Shout out to Dean from WBA for this technique
 export const makeKeypairs = (amount) => {
